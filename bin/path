#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path("../../lib", __FILE__)
require "path"
require "ext/array"
require "dispel"

class Map < Array
  attr_accessor :cursor_x, :cursor_y

  def initialize(width, height)
    @cursor_x, @cursor_y = width / 2, height / 2
    super(width) do
      Array.new(height) do
        rand > 0.25 ? " " : false
      end
    end
  end

  def to_s
    transpose.each.with_index.map do |row, y|
      row.each_with_index.map do |column, x|
        if cursor_x == x && cursor_y == y
          "X"
        else
          "#{column ? column : "\u25A1"}"
        end.center(3)
      end.join("")
    end.join("\n")
  end
end

Dispel::Screen.open do |screen|
  width  = 5
  map    = Map.new(screen.columns / width, screen.lines - 3)
  log    = String.new
  help = "arrows: move s: place start f: place finish t: toggle open/closed\nCtrl+c: exit"
  start_x, start_y, finish_x, finish_y = nil
  drawable = [
    map,
    help,
    log
  ]

  screen.draw drawable.map(&:to_s).join("\n")

  Dispel::Keyboard.output do |key|
    case key
    when :"Ctrl+c"
      break
    when :up
      map.cursor_y -= 1
    when :down
      map.cursor_y += 1
    when :right
      map.cursor_x += 1
    when :left
      map.cursor_x -= 1
    when "t"
      x, y = map.cursor_x, map.cursor_y
      map[x][y] = !map[x][y]
    when "f"
      finish_x, finish_y = map.cursor_x, map.cursor_y
    when "s"
      start_x, start_y = map.cursor_x, map.cursor_y
    end

    if start_x && start_y && finish_x && finish_y
      nodes   = map.to_nodes
      start   = nodes[start_x][start_y]
      finish  = nodes[finish_x][finish_y]
      visited = {}

      heuristic = proc do |to, from|
        x = to.data[:x] - from.data[:x]
        y = to.data[:y] - from.data[:y]
        Math.sqrt(x ** 2 + y ** 2)
      end

      distances = Path::Node.df_search start, finish, heuristic

      distances.each do |node, value|
        x, y = node.data[:x], node.data[:y]
        map[x][y] = value
      end

      while(start != finish) do
        x, y = start.data[:x], start.data[:y]
        map[x][y] = " . "

        start = start.neighbors.min do |a, b|
          a = distances[a] || Float::INFINITY
          b = distances[b] || Float::INFINITY

          a <=> b
        end
      end
    end

    screen.draw drawable.map(&:to_s).join("\n")
  end
end
